name: Deploy to GCS

on:
  workflow_dispatch:
    inputs:
      prefix:
        description: "Carpeta base (ej: barrios-caba-map-v2025)"
        required: true
        default: "barrios-caba-map-v2025"
      version:
        description: "Sufijo de versión (ej: m)"
        required: true
        default: "m"
      devMode:
        description: "devMode en el manifest (true|false)"
        required: true
        default: "false"

      bucket:
        description: "Bucket GCS"
        required: true
        default: "mapa-barrios-degcba"
      scheme:
        description: "Esquema para resource (https|gs)"
        required: true
        default: "https"
      configName:
        description: "Nombre del config (config.json o Config.json)"
        required: true
        default: "config.json"
      setIdToFolder:
        description: "Forzar id del componente = carpeta (true|false)"
        required: true
        default: "true"
      setIamPublic:
        description: "(Opcional) Dar allUsers:objectViewer si falta"
        required: true
        default: "false"
      applyCors:
        description: "(Opcional) Aplicar cors.json del repo"
        required: true
        default: "false"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # requerido por WIF

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm ci

      - name: Build (si aplica)
        run: npm run build --if-present

      # 🔐 AUTH con WIF (tu forma). Guardamos outputs.
      - name: Auth to Google Cloud (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_environment_variables: true  # expone GOOGLE_GHA_CREDS_PATH, etc.

      - name: Setup gcloud (with gsutil)
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: gsutil
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # 👀 Sanity check de identidad y acceso
      - name: Auth & Bucket check
        env:
          B: ${{ github.event.inputs.bucket }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
        run: |
          set -e
          echo "ADC file: $GOOGLE_APPLICATION_CREDENTIALS"
          test -f "$GOOGLE_APPLICATION_CREDENTIALS" || { echo "No existe ADC file"; exit 10; }

          echo "gcloud version:" && gcloud version
          echo "Auth list (puede salir vacío con WIF y es OK):" && gcloud auth list || true
          echo "Print access token (probar WIF):"
          gcloud auth print-access-token | head -c 20 && echo "..."

          echo "List bucket con gcloud storage:"
          gcloud storage buckets list --filter="name=projects/_/buckets/$B" || true
          echo "Head bucket con gcloud storage:"
          gcloud storage buckets describe gs://$B --format="yaml(name,location)" || true

      - name: Compute vars
        id: vars
        run: |
          echo "BUCKET=${{ github.event.inputs.bucket }}" >> $GITHUB_OUTPUT
          echo "FOLDER=${{ github.event.inputs.prefix }}-${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

      # 🔧 PREPARE manifest/resources (flags con espacios) + ENV fallback
      - name: Prepare manifest/resources
        env:
          BUCKET:  ${{ github.event.inputs.bucket }}
          PREFIX:  ${{ github.event.inputs.prefix }}
          VERSION: ${{ github.event.inputs.version }}
          DEVMODE: ${{ github.event.inputs.devMode }}
          SCHEME:  ${{ github.event.inputs.scheme }}
          CONFIGNAME:   ${{ github.event.inputs.configName }}
          SETIDTOFOLDER: ${{ github.event.inputs.setIdToFolder }}
          MANIFESTPATH: public/manifest.json
        run: node scripts/prepare-version.mjs --bucket "${{ github.event.inputs.bucket }}" --prefix "${{ github.event.inputs.prefix }}" --version "${{ github.event.inputs.version }}" --devMode "${{ github.event.inputs.devMode }}" --scheme "${{ github.event.inputs.scheme }}" --configName "${{ github.event.inputs.configName }}" --setIdToFolder "${{ github.event.inputs.setIdToFolder }}" --manifestPath public/manifest.json && echo "==== manifest.json (result) ====" && cat public/manifest.json
        shell: bash

      # 🚀 Upload usando gcloud storage (toma WIF/ADC sin sorpresas)
      - name: Upload to GCS (core files + estáticos)
        env:
          B: ${{ steps.vars.outputs.BUCKET }}
          V: ${{ steps.vars.outputs.FOLDER }}
          CFG: ${{ github.event.inputs.configName }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
        run: |
          set -e
          echo "Destino: gs://$B/$V"
          [ -n "$B" ] || { echo "ERROR: BUCKET vacío"; exit 2; }
          [ -n "$V" ] || { echo "ERROR: FOLDER vacío"; exit 3; }
          test -f public/manifest.json

          # Subir archivos
          gcloud storage cp public/manifest.json        gs://$B/$V/manifest.json
          gcloud storage cp public/$CFG                 gs://$B/$V/$CFG || true

          if [ -f "dist/Visualization.js" ]; then
            gcloud storage cp dist/Visualization.js     gs://$B/$V/Visualization.js
          elif [ -f "public/Visualization.js" ]; then
            gcloud storage cp public/Visualization.js   gs://$B/$V/Visualization.js
          fi

          if [ -f "dist/Visualization.css" ]; then
            gcloud storage cp dist/Visualization.css    gs://$B/$V/Visualization.css
          elif [ -f "public/Visualization.css" ]; then
            gcloud storage cp public/Visualization.css  gs://$B/$V/Visualization.css
          fi

          # Estáticos opcionales
          for f in Icon.png Logo.png package.html privacy.html support.html barrioscaba.geojson barrioscaba.js; do
            if [ -f "public/$f" ]; then
              gcloud storage cp public/$f gs://$B/$V/$f || true
            fi
          done

          # Metadatos (cache/control y content-type)
          gcloud storage objects update gs://$B/$V/manifest.json         --cache-control="no-store" --content-type="application/json"
          gcloud storage objects update gs://$B/$V/$CFG                  --cache-control="no-store" --content-type="application/json" || true
          gcloud storage objects update gs://$B/$V/Visualization.js      --cache-control="no-store" --content-type="application/javascript" || true
          gcloud storage objects update gs://$B/$V/Visualization.css     --cache-control="no-store" --content-type="text/css" || true

      - name: (Opcional) Bucket público por IAM
        if: ${{ github.event.inputs.setIamPublic == 'true' }}
        env:
          B: ${{ steps.vars.outputs.BUCKET }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
        run: gcloud storage buckets add-iam-policy-binding gs://$B --member="allUsers" --role="roles/storage.objectViewer"

      - name: (Opcional) Aplicar CORS desde cors.json del repo
        if: ${{ github.event.inputs.applyCors == 'true' }}
        env:
          B: ${{ steps.vars.outputs.BUCKET }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
        run: |
          if [ -f "cors.json" ]; then
            gcloud storage buckets update gs://$B --cors-file=cors.json
          else
            echo "cors.json no encontrado, omito"
          fi

      - name: Verify HEAD
        env:
          B: ${{ steps.vars.outputs.BUCKET }}
          V: ${{ steps.vars.outputs.FOLDER }}
        run: |
          for u in \
            "https://storage.googleapis.com/$B/$V/manifest.json" \
            "https://storage.googleapis.com/$B/$V/config.json" \
            "https://storage.googleapis.com/$B/$V/Visualization.js" \
            "https://storage.googleapis.com/$B/$V/Visualization.css"
          do
            echo "::group::HEAD $u"
            curl -I -sS "$u" | sed -n '1p;/^content-type:/Ip;/^cache-control:/Ip'
            echo "::endgroup::"
          done

      - name: Output URLs
        env:
          B: ${{ steps.vars.outputs.BUCKET }}
          V: ${{ steps.vars.outputs.FOLDER }
        run: |
          echo "Manifest:  https://storage.googleapis.com/$B/$V/manifest.json"
          echo "Package:   https://storage.googleapis.com/$B/$V/"
          echo "Allowlist (reporte): gs://$B/$V"