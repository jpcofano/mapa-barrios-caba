# .github/workflows/deploy-gcs.yml
name: Build & Deploy Community

on:
  workflow_dispatch:
    inputs:
      bucket:
        description: "Nombre del bucket GCS (sin gs://)"
        required: true
        type: string
      prefix:
        description: "Prefijo de carpeta (p.ej. barrios-caba-map-v2025)"
        required: true
        type: string
      version:
        description: "Versión (p.ej. m, v2025-08-17, etc.)"
        required: true
        type: string
      devMode:
        description: "Habilitar devMode en manifest"
        required: false
        default: "false"
        type: string
      scheme:
        description: "Esquema para packageUrl/resources (gs|https)"
        required: false
        default: "gs"
        type: string
      configName:
        description: "Nombre del config (default: config.json)"
        required: false
        default: "config.json"
        type: string
      setIdToFolder:
        description: "Usar <prefix>-<version> como id del componente"
        required: false
        default: "true"
        type: string
      manifestPath:
        description: "Ruta de salida del manifest (default: public/manifest.json)"
        required: false
        default: "public/manifest.json"
        type: string

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # para Workload Identity Federation

    env:
      BUCKET: ${{ inputs.bucket }}
      PREFIX: ${{ inputs.prefix }}
      VERSION: ${{ inputs.version }}
      DEV_MODE: ${{ inputs.devMode }}
      SCHEME: ${{ inputs.scheme }}
      CONFIG_NAME: ${{ inputs.configName }}
      SET_ID_TO_FOLDER: ${{ inputs.setIdToFolder }}
      MANIFEST_PATH: ${{ inputs.manifestPath }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      - name: Build (Vite o similar)
        run: |
          if npm run | grep -qE '^  build'; then
            npm run build
          else
            echo "No hay script build, continuo..."
          fi

      # ---------- Auth con Workload Identity ----------
      - name: "Auth to Google Cloud (WIF)"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: "Setup gcloud SDK"
        uses: google-github-actions/setup-gcloud@v2

      - name: "Version prep (manifest limpio y scheme coherente)"
        run: |
          node scripts/prepare-version.mjs \
            --bucket "${BUCKET}" \
            --prefix "${PREFIX}" \
            --version "${VERSION}" \
            --devMode "${DEV_MODE}" \
            --scheme "${SCHEME}" \
            --configName "${CONFIG_NAME}" \
            --setIdToFolder "${SET_ID_TO_FOLDER}" \
            --manifestPath "${MANIFEST_PATH}"

      - name: "Compute package path (sanitizado)"
        id: pkg
        shell: bash
        run: |
          sanitize() {
            python3 - <<'PY'
import sys, re
s = sys.stdin.read()
s = re.sub(r'\u00A0','',s) # NBSP
s = re.sub(r'\s+','',s)    # espacios
s = re.sub(r'[^A-Za-z0-9._-]','',s)
print(s)
PY
          }
          PFX="$(printf '%s' "${PREFIX}" | sanitize)"
          VER="$(printf '%s' "${VERSION}" | sanitize)"
          PKG_PATH="gs://${BUCKET}/${PFX}-${VER}/"
          echo "PKG_PATH=${PKG_PATH}" | tee -a $GITHUB_OUTPUT
          echo "[deploy] package: ${PKG_PATH}"

      - name: "Upload JS"
        run: |
          gsutil -m -h "Cache-Control:no-store" -h "Content-Type: application/javascript" \
            cp dist/Visualization.js "${{ steps.pkg.outputs.PKG_PATH }}Visualization.js"

      - name: "Upload CSS (si existe)"
        run: |
          if [ -f dist/Visualization.css ]; then
            gsutil -m -h "Cache-Control:no-store" -h "Content-Type: text/css" \
              cp dist/Visualization.css "${{ steps.pkg.outputs.PKG_PATH }}Visualization.css"
          else
            echo "No hay Visualization.css, se omite."
          fi

      - name: "Upload config.json"
        run: |
          gsutil -m -h "Cache-Control:no-store" -h "Content-Type: application/json" \
            cp "${MANIFEST_PATH%/*}/${CONFIG_NAME}" "${{ steps.pkg.outputs.PKG_PATH }}${CONFIG_NAME}"

      - name: "Upload manifest.json"
        run: |
          gsutil -m -h "Cache-Control:no-store" -h "Content-Type: application/json" \
            cp "${MANIFEST_PATH}" "${{ steps.pkg.outputs.PKG_PATH }}manifest.json"

       (Opcional) Hacer objetos públicos si el bucket no es público
       - name: "Make objects public (optional)"
         run: |
           gsutil iam ch allUsers:objectViewer "gs://${BUCKET}"

      - name: "Show manifest (debug)"
        run: |
          gsutil cp "${{ steps.pkg.outputs.PKG_PATH }}manifest.json" - | head -n 80
          echo "Listando carpeta:"
          gsutil ls -l "${{ steps.pkg.outputs.PKG_PATH }}"
