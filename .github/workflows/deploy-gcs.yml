name: Deploy to GCS

on:
  workflow_dispatch:
    inputs:
      prefix:
        description: "Carpeta base (ej: barrios-caba-map-v2025)"
        required: true
        default: "barrios-caba-map-v2025"
      version:
        description: "Sufijo de versi√≥n (ej: m)"
        required: true
        default: "m"
      devMode:
        description: "devMode en el manifest (true|false)"
        required: true
        default: "false"
      # Opcionales (quedan con defaults sensatos)
      bucket:
        description: "Bucket GCS"
        required: true
        default: "mapa-barrios-degcba"
      scheme:
        description: "Esquema de resources (https|gs)"
        required: true
        default: "https"
      configName:
        description: "Nombre del config (config.json o Config.json)"
        required: true
        default: "config.json"
      setIdToFolder:
        description: "Forzar id del componente = carpeta (true|false)"
        required: true
        default: "true"
      setIamPublic:
        description: "(Opcional) Dar allUsers:objectViewer si falta"
        required: true
        default: "false"
      applyCors:
        description: "(Opcional) Aplicar cors.json del repo"
        required: true
        default: "false"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # no se usa con esta forma de login, pero lo dejo por si migr√°s

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm ci

      - name: Build (si aplica)
        run: npm run build --if-present

      # üîê **LOGIN** como lo ten√≠as: service_account_key + export_default_credentials
      - name: Setup gcloud + gsutil (classic SA key)
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}   # <- tu JSON de la SA (p.ej. ci-deploy@‚Ä¶)
          export_default_credentials: true
          project_id: ${{ secrets.GCP_PROJECT_ID }}        # opcional; o hardcode√° si quer√©s

      - name: Compute vars
        id: vars
        run: |
          echo "BUCKET=${{ github.event.inputs.bucket }}" >> $GITHUB_OUTPUT
          echo "FOLDER=${{ github.event.inputs.prefix }}-${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

      # Si us√°s mi prepare-version.mjs ‚Äúnuevo‚Äù, esto alinea id/packageUrl/resource y respeta configName/scheme
      - name: Prepare manifest/resources
        run: |
          node scripts/prepare-version.mjs \
            --bucket="${{ steps.vars.outputs.BUCKET }}" \
            --prefix="${{ github.event.inputs.prefix }}" \
            --version="${{ github.event.inputs.version }}" \
            --devMode="${{ github.event.inputs.devMode }}" \
            --scheme="${{ github.event.inputs.scheme }}" \
            --configName="${{ github.event.inputs.configName }}" \
            --setIdToFolder="${{ github.event.inputs.setIdToFolder }}"

          echo "==== manifest.json (result) ===="
          cat public/manifest.json

      - name: Upload to GCS (core files + est√°ticos)
        env:
          B: ${{ steps.vars.outputs.BUCKET }}
          V: ${{ steps.vars.outputs.FOLDER }}
          CFG: ${{ github.event.inputs.configName }}
        run: |
          set -e

          # manifest y config con no-store
          gsutil -h "Cache-Control:no-store" -h "Content-Type: application/json" \
            cp public/manifest.json gs://$B/$V/manifest.json

          gsutil -h "Cache-Control:no-store" -h "Content-Type: application/json" \
            cp public/$CFG gs://$B/$V/$CFG

          # JS/CSS (no-store mientras iter√°s)
          if [ -f "dist/Visualization.js" ]; then
            gsutil -h "Cache-Control:no-store" -h "Content-Type: application/javascript" \
              cp dist/Visualization.js gs://$B/$V/Visualization.js
          elif [ -f "public/Visualization.js" ]; then
            gsutil -h "Cache-Control:no-store" -h "Content-Type: application/javascript" \
              cp public/Visualization.js gs://$B/$V/Visualization.js
          fi

          if [ -f "dist/Visualization.css" ]; then
            gsutil -h "Cache-Control:no-store" -h "Content-Type: text/css" \
              cp dist/Visualization.css gs://$B/$V/Visualization.css
          elif [ -f "public/Visualization.css" ]; then
            gsutil -h "Cache-Control:no-store" -h "Content-Type: text/css" \
              cp public/Visualization.css gs://$B/$V/Visualization.css
          fi

          # Est√°ticos opcionales (cache largo)
          for f in Icon.png Logo.png package.html privacy.html support.html barrioscaba.geojson barrioscaba.js; do
            if [ -f "public/$f" ]; then
              gsutil -h "Cache-Control:public, max-age=31536000, immutable" \
                cp public/$f gs://$B/$V/$f || true
            fi
          done

      - name: (Opcional) Bucket p√∫blico por IAM
        if: ${{ github.event.inputs.setIamPublic == 'true' }}
        env:
          B: ${{ steps.vars.outputs.BUCKET }}
        run: |
          gsutil iam ch allUsers:objectViewer gs://$B

      - name: (Opcional) Aplicar CORS desde cors.json del repo
        if: ${{ github.event.inputs.applyCors == 'true' }}
        env:
          B: ${{ steps.vars.outputs.BUCKET }}
        run: |
          if [ -f "cors.json" ]; then
            gsutil cors set cors.json gs://$B
          else
            echo "cors.json no encontrado, omito"
          fi

      - name: Verify HEAD
        env:
          B: ${{ steps.vars.outputs.BUCKET }}
          V: ${{ steps.vars.outputs.FOLDER }}
          CFG: ${{ github.event.inputs.configName }}
        run: |
          for u in \
            "https://storage.googleapis.com/$B/$V/manifest.json" \
            "https://storage.googleapis.com/$B/$V/$CFG" \
            "https://storage.googleapis.com/$B/$V/Visualization.js" \
            "https://storage.googleapis.com/$B/$V/Visualization.css"
          do
            echo "::group::HEAD $u"
            curl -I -sS "$u" | sed -n '1p;/^content-type:/Ip;/^cache-control:/Ip'
            echo "::endgroup::"
          done

      - name: Output URLs
        env:
          B: ${{ steps.vars.outputs.BUCKET }}
          V: ${{ steps.vars.outputs.FOLDER }}
        run: |
          echo "Manifest:  https://storage.googleapis.com/$B/$V/manifest.json"
          echo "Package:   https://storage.googleapis.com/$B/$V/"
          echo "Allowlist (reporte): gs://$B/$V"
