name: Deploy to GCS

on:
  workflow_dispatch:
    inputs:
      prefix:
        description: "Prefijo de carpeta (p.ej. barrios-caba-map-v2025)"
        required: true
        default: "barrios-caba-map-v2025"
      version:
        description: "Versión/sufijo de carpeta (p.ej. d, e, h...)"
        required: true
        default: "d"
      devMode:
        description: "true/false para marcar dev en el manifest (si tu build lo usa)"
        required: true
        default: "false"

permissions:
  contents: read
  id-token: write   # imprescindible para OIDC / WIF

env:
  # GCP
  GCP_PROJECT_ID: mimetic-union-469017-f3
  GCP_WIF_PROVIDER: projects/842577696066/locations/global/workloadIdentityPools/github-pool/providers/github
  GCP_SERVICE_ACCOUNT: ci-deploy@mimetic-union-469017-f3.iam.gserviceaccount.com
  GCS_BUCKET: mapa-barrios-degcba

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ---------- Build ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      - name: Build (usa tus scripts)
        run: |
          echo "devMode=${{ github.event.inputs.devMode }}"
          npm run build

      # (Opcional) Si tenés scripts/prepare-version.mjs y querés usarlo:
      - name: Prepare version (opcional)
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          PREFIX="${{ github.event.inputs.prefix }}"
          VERSION="${{ github.event.inputs.version }}"
          # Sanitizar NBSP/espacios y forzar minúsculas con guiones
          PREFIX="${PREFIX//[$'\u00A0']/ }"; PREFIX="$(echo "$PREFIX" | tr '[:upper:]' '[:lower:]' | sed -E 's/[[:space:]]+/-/g')"
          VERSION="${VERSION//[$'\u00A0']/ }"; VERSION="$(echo "$VERSION" | tr '[:upper:]' '[:lower:]' | sed -E 's/[[:space:]]+/-/g')"

          # Si existe el script, usalo; si no, seguimos.
          if [ -f scripts/prepare-version.mjs ]; then
            node scripts/prepare-version.mjs --prefix="$PREFIX" --version="$VERSION" || true
          fi

          echo "TARGET_DIR=${PREFIX}-${VERSION}" >> "$GITHUB_OUTPUT"

      # ---------- Auth (OIDC / WIF) ----------
      - name: Auth to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WIF_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Debug gcloud identity
        run: |
          gcloud auth list
          gcloud config list

      # ---------- Deploy ----------
      - name: Deploy to GCS
        env:
          TARGET_DIR: ${{ steps.prep.outputs.TARGET_DIR }}
        run: |
          set -euo pipefail
          DEST="gs://${GCS_BUCKET}/${TARGET_DIR}/"

          echo ">> DEST = ${DEST}"
          # Crear dist si no existe (por si el build no generó nada)
          [ -d dist ] || mkdir -p dist

          echo ">> Copying dist/* to ${DEST}"
          gcloud storage cp -r dist/* "${DEST}"

          # Metadatos (no-store + MIME correctos) si existen los archivos
          for obj in Visualization.js Visualization.css manifest.json config.json; do
            if gcloud storage ls "${DEST}${obj}" >/dev/null 2>&1; then
              case "$obj" in
                Visualization.js)  CT=application/javascript ;;
                Visualization.css) CT=text/css ;;
                manifest.json|config.json) CT=application/json ;;
              esac
              gcloud storage objects update "${DEST}${obj}" \
                --content-type="${CT}" --cache-control=no-store
            fi
          done

      - name: List deployed files
        env:
          TARGET_DIR: ${{ steps.prep.outputs.TARGET_DIR }}
        run: gcloud storage ls -r "gs://${{ env.GCS_BUCKET }}/${{ env.TARGET_DIR }}/"
