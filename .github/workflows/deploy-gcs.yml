name: Deploy to GCS

on:
  workflow_dispatch:
    inputs:
      target_dir:
        description: "Carpeta destino dentro del bucket (p.ej. barrios-caba-map-v2025-d)"
        required: true
        default: "barrios-caba-map-v2025-d"
      build:
        description: "Correr build de Node antes de deploy"
        required: true
        default: "true"

permissions:
  contents: read
  id-token: write   # imprescindible para OIDC / Workload Identity Federation

env:
  GCP_PROJECT_ID: mimetic-union-469017-f3
  GCP_WIF_PROVIDER: projects/842577696066/locations/global/workloadIdentityPools/github-pool/providers/github-provider
  GCP_SERVICE_ACCOUNT: ci-deploy@mimetic-union-469017-f3.iam.gserviceaccount.com
  GCS_BUCKET: mapa-barrios-degcba

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # (Opcional) Build con Node (Vite)
      - name: Setup Node
        if: ${{ inputs.build == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        if: ${{ inputs.build == 'true' }}
        run: npm ci

      - name: Build
        if: ${{ inputs.build == 'true' }}
        run: npm run build

      # Auth por OIDC (WIF)
      - name: Auth to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WIF_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Debug gcloud identity
        run: |
          gcloud auth list
          gcloud config list

      - name: Smoke test bucket (list)
        run: gcloud storage ls gs://${{ env.GCS_BUCKET }}/

      - name: Deploy to GCS
        env:
          TARGET_DIR: ${{ inputs.target_dir }}
        run: |
          set -euo pipefail
          # Carpeta destino: gs://<bucket>/<target_dir>/
          DEST="gs://${GCS_BUCKET}/${TARGET_DIR}/"

          # Si no existe dist (porque build=false), creala mÃ­nima
          if [ ! -d "dist" ]; then
            mkdir -p dist
          fi

          echo ">> Copying dist/* to ${DEST}"
          gcloud storage cp -r dist/* "${DEST}"

          # Setear metadatos clave si existen los archivos
          if gcloud storage ls "${DEST}Visualization.js" >/dev/null 2>&1; then
            gcloud storage objects update "${DEST}Visualization.js" \
              --content-type=application/javascript --cache-control=no-store
          fi
          if gcloud storage ls "${DEST}Visualization.css" >/dev/null 2>&1; then
            gcloud storage objects update "${DEST}Visualization.css" \
              --content-type=text/css --cache-control=no-store
          fi
          if gcloud storage ls "${DEST}manifest.json" >/dev/null 2>&1; then
            gcloud storage objects update "${DEST}manifest.json" \
              --content-type=application/json --cache-control=no-store
          fi
          if gcloud storage ls "${DEST}Config.json" >/dev/null 2>&1; then
            gcloud storage objects update "${DEST}Config.json" \
              --content-type=application/json --cache-control=no-store
          fi

      - name: List deployed files
        env:
          TARGET_DIR: ${{ inputs.target_dir }}
        run: gcloud storage ls -r "gs://${{ env.GCS_BUCKET }}/${{ env.TARGET_DIR }}/"
