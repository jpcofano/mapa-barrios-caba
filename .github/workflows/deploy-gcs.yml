name: Build & Deploy Community Viz

on:
  workflow_dispatch:
    inputs:
      bucket:
        description: "Bucket GCS (solo nombre, ej: mapa-barrios-degcba)"
        required: true
        default: "mapa-barrios-degcba"
      prefix:
        description: "Carpeta base (ej: barrios-caba-map-v2025)"
        required: true
        default: "barrios-caba-map-v2025"
      version:
        description: "Sufijo de versi√≥n (ej: m). Si est√° vac√≠o, no agrega sufijo."
        required: false
        default: ""
      devMode:
        description: "Forzar devMode en manifest (true|false)"
        required: false
        default: "true"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # requerido para Workload Identity Federation

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # üîê Auth con WIF (usa tus secrets ya cargados)
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">= 471.0.0"

      # üì¶ Variables derivadas (FOLDER y BUCKET_PATH en GS)
      - name: Compute paths
        shell: bash
        run: |
          set -e
          FOLDER="${{ inputs.prefix }}"
          if [ -n "${{ inputs.version }}" ]; then
            FOLDER="${FOLDER}-${{ inputs.version }}"
          fi
          echo "FOLDER=$FOLDER" >> $GITHUB_ENV
          echo "BUCKET=${{ inputs.bucket }}" >> $GITHUB_ENV
          echo "BUCKET_PATH=gs://${{ inputs.bucket }}/$FOLDER" >> $GITHUB_ENV
          echo "-> FOLDER=$FOLDER"
          echo "-> BUCKET_PATH=gs://${{ inputs.bucket }}/$FOLDER"

      # üß© Parchea manifest local para que apunte a gs:// y respete devMode
      # (Si ya lo ten√©s correcto, este paso lo deja igual)
      - name: Patch manifest to gs://
        if: hashFiles('public/manifest.json') != ''
        shell: bash
        run: |
          set -e
          DM="${{ inputs.devMode }}"
          JS="$BUCKET_PATH/Visualization.js"
          CFG="$BUCKET_PATH/config.json"
          CSS="$BUCKET_PATH/Visualization.css"

          if command -v jq >/dev/null 2>&1; then
            tmp="$(mktemp)"
            jq --arg js "$JS" --arg cfg "$CFG" --arg css "$CSS" --argjson dm $( [ "$DM" = "true" ] && echo true || echo false ) '
              .devMode = $dm
              | ( .components[0].resource //= {} )
              | .components[0].resource.js = $js
              | .components[0].resource.config = $cfg
              | .components[0].resource.css = $css
              | del(.packageUrl)
            ' public/manifest.json > "$tmp"
            mv "$tmp" public/manifest.json
          else
            echo "jq no est√° disponible; no se parchea manifest."
          fi

      # üöÄ Deploy con gsutil (sin cach√© y con tipos correctos)
      - name: Deploy to GCS
        shell: bash
        run: |
          set -e
          echo "Deploying to $BUCKET_PATH"

          # JS
          gsutil -m -h "Cache-Control:no-store" -h "Content-Type: application/javascript" \
            cp dist/Visualization.js "$BUCKET_PATH/Visualization.js"

          # CSS
          if [ -f dist/Visualization.css ]; then
            gsutil -m -h "Cache-Control:no-store" -h "Content-Type: text/css" \
              cp dist/Visualization.css "$BUCKET_PATH/Visualization.css"
          fi

          # config.json (min√∫scula)
          gsutil -m -h "Cache-Control:no-store" -h "Content-Type: application/json" \
            cp public/config.json "$BUCKET_PATH/config.json"

          # manifest.json (ya parcheado a gs://)
          gsutil -m -h "Cache-Control:no-store" -h "Content-Type: application/json" \
            cp public/manifest.json "$BUCKET_PATH/manifest.json"

          # Est√°ticos opcionales
          if [ -f public/Icon.png ]; then
            gsutil -m -h "Cache-Control:no-store" -h "Content-Type: image/png" \
              cp public/Icon.png "$BUCKET_PATH/Icon.png"
          fi
          if [ -f public/Logo.png ]; then
            gsutil -m -h "Cache-Control:no-store" -h "Content-Type: image/png" \
              cp public/Logo.png "$BUCKET_PATH/Logo.png"
          fi

      # ‚úÖ Verificaci√≥n por gs:// (stat) en vez de HTTPS
      - name: Verify (gs)
        shell: bash
        run: |
          set -e
          for o in \
            "$BUCKET_PATH/manifest.json" \
            "$BUCKET_PATH/config.json" \
            "$BUCKET_PATH/Visualization.js" \
            "$BUCKET_PATH/Visualization.css"
          do
            echo "::group::STAT $o"
            gsutil stat "$o" | sed -n '/^Content-Type:/Ip;/^Cache-Control:/Ip;/^Generation:/Ip;/^Metageneration:/Ip;/^Update time:/Ip'
            echo "::endgroup::"
          done

      # üëÄ Mostrar qu√© URIs referencia el manifest subido (deber√≠an ser gs://...)
      - name: Show manifest resource URIs
        shell: bash
        run: |
          set -e
          if command -v jq >/dev/null 2>&1; then
            echo "::group::manifest.json (components[0].resource)"
            gsutil cat "$BUCKET_PATH/manifest.json" | jq -r '.components[0].resource | to_entries[] | "\(.key): \(.value)"'
            echo "::endgroup::"
          else
            echo "jq no est√° disponible; omitiendo inspecci√≥n de manifest."
          fi
