name: Deploy to GCS (manual o push)

permissions:
  contents: read
  id-token: write   # requerido para OIDC/WIF

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Carpeta de deploy (ej: hotfix-cache). Si se deja vacío, usa YYYYMMDD.'
        required: false
        default: ''

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      # --- AUTH con WIF (usa tus secrets existentes) ---
      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: gsutil

      # Prepara versión: si "version" viene por workflow_dispatch se usa; sino YYYYMMDD
      - name: Prepare versioned manifest
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "Usando version manual: ${{ github.event.inputs.version }}"
            node scripts/prepare-version.mjs --version=${{ github.event.inputs.version }}
          else
            echo "Sin version manual; usando fecha (YYYYMMDD)"
            node scripts/prepare-version.mjs
          fi

      - name: Build (Vite bundle)
        run: npm run build

      # Deploy POSIX-safe (sin [[ ]], con validación de bucket)
      - name: Deploy to GCS
        shell: bash
        run: |
          set -euo pipefail
          BUCKET_PATH=$(cat .bucket_path)

          # Validación segura del destino
          case "$BUCKET_PATH" in
            gs://mapa-barrios-degcba/*) echo "Bucket destino: $BUCKET_PATH" ;;
            *) echo "Bucket inválido: $BUCKET_PATH"; exit 1 ;;
          esac

          echo "Subiendo a: $BUCKET_PATH"

          # JS
          gsutil -h "Content-Type: application/javascript" \
                 -h "Cache-Control: no-store" \
                 cp dist/Visualization.js "$BUCKET_PATH/Visualization.js"

          # CSS (si existe)
          if [ -f dist/Visualization.css ]; then
            gsutil -h "Content-Type: text/css" \
                   -h "Cache-Control: no-store" \
                   cp dist/Visualization.css "$BUCKET_PATH/Visualization.css"
          fi

          # Config & manifest
          gsutil -h "Content-Type: application/json" -h "Cache-Control: no-store" cp public/Config.json   "$BUCKET_PATH/Config.json"
          gsutil -h "Content-Type: application/json" -h "Cache-Control: no-store" cp public/manifest.json "$BUCKET_PATH/manifest.json"

          # Assets opcionales
          if [ -f public/Logo.png ]; then
            gsutil -h "Content-Type: image/png" -h "Cache-Control: no-store" cp public/Logo.png "$BUCKET_PATH/Logo.png"
          fi
          if [ -f public/Icon.png ]; then
            gsutil -h "Content-Type: image/png" -h "Cache-Control: no-store" cp public/Icon.png "$BUCKET_PATH/Icon.png"
          fi

      - name: Verify uploaded artifacts
        shell: bash
        run: |
          BUCKET_PATH=$(cat .bucket_path)
          echo "Verificando en: $BUCKET_PATH"
          gsutil ls -l "$BUCKET_PATH/Visualization.js" || true
          gsutil ls -l "$BUCKET_PATH/Visualization.css" || true
          gsutil ls -l "$BUCKET_PATH/manifest.json" || true
          gsutil ls -l "$BUCKET_PATH/Config.json" || true
